{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vibek Rana\\\\Pictures\\\\frontend-main\\\\src\\\\components\\\\LinkedInConnect.js\",\n  _s = $RefreshSig$();\n// src/components/LinkedInConnect.js\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LinkedInConnect = ({\n  appUser,\n  onConnected,\n  connected,\n  connectionDetail\n}) => {\n  _s();\n  // Listen for popup messages\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.data.type === 'linkedin_callback') {\n        if (event.data.success) {\n          const postingMethod = event.data.posting_method || 'Personal Profile';\n          alert(`LinkedIn connected successfully! \nPosting Method: ${postingMethod}\n${event.data.person_urn ? `Personal URN: ${event.data.person_urn}` : ''}\n${event.data.org_urn ? `Organization URN: ${event.data.org_urn}` : ''}`);\n          onConnected(); // Refresh status\n\n          // Redirect to content page after successful connection\n          setTimeout(() => {\n            console.log('Redirecting to content page...');\n            window.location.href = '/content';\n          }, 2000);\n        } else {\n          alert(`LinkedIn connection failed: ${event.data.error}`);\n        }\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [onConnected]);\n  const handleConnect = () => {\n    const clientId = '86geycovoa141y'; // Your LinkedIn Client ID\n    const redirectUri = encodeURIComponent('http://13.233.45.167:5000/social/linkedin/callback');\n\n    // IMPORTANT: Make sure your LinkedIn app has these scopes approved\n    // You might need to use a more basic scope set if some aren't approved\n    const scope = encodeURIComponent('r_basicprofile w_member_social w_organization_social r_organization_social rw_organization_admin');\n    const state = encodeURIComponent(appUser); // Pass appUser for backend verification\n\n    const url = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}&state=${state}&scope=${scope}`;\n\n    // Open in popup window\n    const popup = window.open(url, 'linkedin-auth', 'width=600,height=600,scrollbars=yes,resizable=yes');\n\n    // Check if popup was blocked\n    if (!popup) {\n      alert('Popup blocked. Please allow popups for this site and try again.');\n      return;\n    }\n\n    // Monitor popup\n    const checkClosed = setInterval(() => {\n      if (popup.closed) {\n        clearInterval(checkClosed);\n        // Give some time for message to be processed\n        setTimeout(() => {\n          onConnected(); // Refresh status when popup closes\n        }, 1000);\n      }\n    }, 1000);\n  };\n  const handleDisconnect = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('Please login again to disconnect LinkedIn.');\n        window.location.href = '/login';\n        return;\n      }\n      const response = await fetch('http://13.233.45.167:5000/social/linkedin/disconnect', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          app_user: appUser\n        })\n      });\n      if (response.status === 401) {\n        const errorData = await response.json();\n        if (errorData.token_expired) {\n          localStorage.removeItem('token');\n          alert('Your session has expired. Please login again.');\n          window.location.href = '/login';\n          return;\n        }\n      }\n      if (response.ok) {\n        onConnected(); // Refresh status\n        alert('LinkedIn disconnected successfully!');\n      } else {\n        const error = await response.json();\n        alert(`Failed to disconnect: ${error.error || error.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error disconnecting LinkedIn:', error);\n      alert('Error disconnecting LinkedIn. Please try again.');\n    }\n  };\n\n  // Show posting method info if connected\n  const getConnectionInfo = () => {\n    if (!connected || !connectionDetail) return '';\n    const postingMethod = connectionDetail.posting_method || 'Personal Profile';\n    const hasOrgAccess = connectionDetail.has_org_access;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '12px',\n        color: '#666',\n        marginTop: '4px'\n      },\n      children: [\"Connected: \", postingMethod, hasOrgAccess && ' (Organization Page Access)']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connected ? handleDisconnect : handleConnect,\n      style: {\n        backgroundColor: connected ? '#dc3545' : '#0077b5',\n        color: 'white',\n        border: 'none',\n        padding: '8px 16px',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        fontSize: '14px'\n      },\n      children: connected ? 'Disconnect LinkedIn' : 'Connect LinkedIn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), getConnectionInfo()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(LinkedInConnect, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LinkedInConnect;\nexport default LinkedInConnect;\nvar _c;\n$RefreshReg$(_c, \"LinkedInConnect\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","LinkedInConnect","appUser","onConnected","connected","connectionDetail","_s","handleMessage","event","data","type","success","postingMethod","posting_method","alert","person_urn","org_urn","setTimeout","console","log","window","location","href","error","addEventListener","removeEventListener","handleConnect","clientId","redirectUri","encodeURIComponent","scope","state","url","popup","open","checkClosed","setInterval","closed","clearInterval","handleDisconnect","token","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","app_user","status","errorData","json","token_expired","removeItem","ok","message","getConnectionInfo","hasOrgAccess","has_org_access","style","fontSize","color","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","backgroundColor","border","padding","borderRadius","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Vibek Rana/Pictures/frontend-main/src/components/LinkedInConnect.js"],"sourcesContent":["// src/components/LinkedInConnect.js\r\nimport React, { useEffect } from 'react';\r\n\r\nconst LinkedInConnect = ({ appUser, onConnected, connected, connectionDetail }) => {\r\n  \r\n  // Listen for popup messages\r\n  useEffect(() => {\r\n    const handleMessage = (event) => {\r\n      if (event.data.type === 'linkedin_callback') {\r\n        if (event.data.success) {\r\n          const postingMethod = event.data.posting_method || 'Personal Profile';\r\n          alert(`LinkedIn connected successfully! \r\nPosting Method: ${postingMethod}\r\n${event.data.person_urn ? `Personal URN: ${event.data.person_urn}` : ''}\r\n${event.data.org_urn ? `Organization URN: ${event.data.org_urn}` : ''}`);\r\n          \r\n          onConnected(); // Refresh status\r\n          \r\n          // Redirect to content page after successful connection\r\n          setTimeout(() => {\r\n            console.log('Redirecting to content page...');\r\n            window.location.href = '/content';\r\n          }, 2000);\r\n          \r\n        } else {\r\n          alert(`LinkedIn connection failed: ${event.data.error}`);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', handleMessage);\r\n    return () => window.removeEventListener('message', handleMessage);\r\n  }, [onConnected]);\r\n\r\n  const handleConnect = () => {\r\n    const clientId = '86geycovoa141y'; // Your LinkedIn Client ID\r\n    const redirectUri = encodeURIComponent('http://13.233.45.167:5000/social/linkedin/callback');\r\n    \r\n    // IMPORTANT: Make sure your LinkedIn app has these scopes approved\r\n    // You might need to use a more basic scope set if some aren't approved\r\n    const scope = encodeURIComponent('r_basicprofile w_member_social w_organization_social r_organization_social rw_organization_admin');\r\n    const state = encodeURIComponent(appUser); // Pass appUser for backend verification\r\n    \r\n    const url = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}&state=${state}&scope=${scope}`;\r\n    \r\n    // Open in popup window\r\n    const popup = window.open(url, 'linkedin-auth', 'width=600,height=600,scrollbars=yes,resizable=yes');\r\n    \r\n    // Check if popup was blocked\r\n    if (!popup) {\r\n      alert('Popup blocked. Please allow popups for this site and try again.');\r\n      return;\r\n    }\r\n    \r\n    // Monitor popup\r\n    const checkClosed = setInterval(() => {\r\n      if (popup.closed) {\r\n        clearInterval(checkClosed);\r\n        // Give some time for message to be processed\r\n        setTimeout(() => {\r\n          onConnected(); // Refresh status when popup closes\r\n        }, 1000);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const handleDisconnect = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Please login again to disconnect LinkedIn.');\r\n        window.location.href = '/login';\r\n        return;\r\n      }\r\n\r\n      const response = await fetch('http://13.233.45.167:5000/social/linkedin/disconnect', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ app_user: appUser })\r\n      });\r\n      \r\n      if (response.status === 401) {\r\n        const errorData = await response.json();\r\n        if (errorData.token_expired) {\r\n          localStorage.removeItem('token');\r\n          alert('Your session has expired. Please login again.');\r\n          window.location.href = '/login';\r\n          return;\r\n        }\r\n      }\r\n      \r\n      if (response.ok) {\r\n        onConnected(); // Refresh status\r\n        alert('LinkedIn disconnected successfully!');\r\n      } else {\r\n        const error = await response.json();\r\n        alert(`Failed to disconnect: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error disconnecting LinkedIn:', error);\r\n      alert('Error disconnecting LinkedIn. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Show posting method info if connected\r\n  const getConnectionInfo = () => {\r\n    if (!connected || !connectionDetail) return '';\r\n    \r\n    const postingMethod = connectionDetail.posting_method || 'Personal Profile';\r\n    const hasOrgAccess = connectionDetail.has_org_access;\r\n    \r\n    return (\r\n      <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>\r\n        Connected: {postingMethod}\r\n        {hasOrgAccess && ' (Organization Page Access)'}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button \r\n        className=\"connect-button\" \r\n        onClick={connected ? handleDisconnect : handleConnect}\r\n        style={{\r\n          backgroundColor: connected ? '#dc3545' : '#0077b5',\r\n          color: 'white',\r\n          border: 'none',\r\n          padding: '8px 16px',\r\n          borderRadius: '4px',\r\n          cursor: 'pointer',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        {connected ? 'Disconnect LinkedIn' : 'Connect LinkedIn'}\r\n      </button>\r\n      {getConnectionInfo()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LinkedInConnect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}