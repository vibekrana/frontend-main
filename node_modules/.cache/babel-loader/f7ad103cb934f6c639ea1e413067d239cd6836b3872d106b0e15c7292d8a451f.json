{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vibek Rana\\\\Pictures\\\\frontend-main\\\\src\\\\components\\\\LinkedInConnect.js\",\n  _s = $RefreshSig$();\n// src/components/LinkedInConnect.js\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LinkedInConnect = ({\n  appUser,\n  onConnected,\n  connected,\n  connectionDetails = null\n}) => {\n  _s();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState(null);\n\n  // Listen for popup messages\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.data.type === 'linkedin_callback') {\n        setIsConnecting(false);\n        if (event.data.success) {\n          const {\n            posting_method,\n            organization_count,\n            has_org_access,\n            person_urn,\n            org_urn,\n            message\n          } = event.data;\n\n          // Set detailed connection status for UI feedback\n          setConnectionStatus({\n            success: true,\n            posting_method,\n            organization_count: organization_count || 0,\n            has_org_access: has_org_access || false,\n            person_urn,\n            org_urn,\n            message: message || 'Connected successfully'\n          });\n\n          // Show success message with organization details\n          let successMessage = `LinkedIn connected successfully!\\n`;\n          successMessage += `Posting Method: ${posting_method}\\n`;\n          if (has_org_access && organization_count > 0) {\n            successMessage += `Organizations Found: ${organization_count}\\n`;\n            successMessage += `Company Pages Detected: ${organization_count > 0 ? 'Yes' : 'No'}`;\n          } else {\n            successMessage += `Will post to: Personal Profile\\n`;\n            successMessage += `Company Pages: None found or no access`;\n          }\n          alert(successMessage);\n          onConnected(); // Refresh status\n\n          // Redirect to content page after successful connection\n          setTimeout(() => {\n            console.log('Redirecting to content page...');\n            window.location.href = '/content';\n          }, 2000);\n        } else {\n          setConnectionStatus({\n            success: false,\n            error: event.data.error\n          });\n          alert(`LinkedIn connection failed: ${event.data.error}`);\n        }\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [onConnected]);\n  const handleConnect = () => {\n    setIsConnecting(true);\n    setConnectionStatus(null);\n    const clientId = '86geycovoa141y'; // Your LinkedIn Client ID\n    const redirectUri = encodeURIComponent('http://13.233.45.167:5000/social/linkedin/callback');\n\n    // Use only authorized scopes from your LinkedIn app\n    const scope = encodeURIComponent('r_basicprofile w_member_social w_organization_social r_organization_social rw_organization_admin w_organization_social_feed r_member_profileAnalytics');\n    const state = encodeURIComponent(appUser);\n    const url = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}&state=${state}&scope=${scope}`;\n\n    // Open in popup window\n    const popup = window.open(url, 'linkedin-auth', 'width=600,height=700,scrollbars=yes,resizable=yes');\n\n    // Check if popup was blocked\n    if (!popup) {\n      alert('Popup blocked. Please allow popups for this site and try again.');\n      setIsConnecting(false);\n      return;\n    }\n\n    // Monitor popup\n    const checkClosed = setInterval(() => {\n      if (popup.closed) {\n        clearInterval(checkClosed);\n        setIsConnecting(false);\n        // Give some time for message to be processed\n        setTimeout(() => {\n          onConnected(); // Refresh status when popup closes\n        }, 1000);\n      }\n    }, 1000);\n  };\n  const handleDisconnect = async () => {\n    try {\n      setIsConnecting(true);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('Please login again to disconnect LinkedIn.');\n        window.location.href = '/login';\n        return;\n      }\n      const response = await fetch('http://13.233.45.167:5000/social/linkedin/disconnect', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          app_user: appUser\n        })\n      });\n      if (response.status === 401) {\n        const errorData = await response.json();\n        if (errorData.token_expired) {\n          localStorage.removeItem('token');\n          alert('Your session has expired. Please login again.');\n          window.location.href = '/login';\n          return;\n        }\n      }\n      if (response.ok) {\n        setConnectionStatus(null);\n        onConnected(); // Refresh status\n        alert('LinkedIn disconnected successfully!');\n      } else {\n        const error = await response.json();\n        alert(`Failed to disconnect: ${error.error || error.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error disconnecting LinkedIn:', error);\n      alert('Error disconnecting LinkedIn. Please try again.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Helper function to get connection info display\n  const getConnectionInfo = () => {\n    if (!connected || !connectionDetails) return null;\n    const {\n      detail\n    } = connectionDetails;\n    if (!detail) return null;\n    const {\n      posting_method,\n      has_org_access,\n      organization_count = 0,\n      all_org_urns = []\n    } = detail;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '8px',\n        fontSize: '12px',\n        color: '#666'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Method:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 14\n        }, this), \" \", posting_method || 'Personal Profile']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), has_org_access && organization_count > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Organizations:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 18\n          }, this), \" \", organization_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Company Access:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 18\n          }, this), \" Yes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), (!has_org_access || organization_count === 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Company Access:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 16\n        }, this), \" Personal only\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  };\n  const getButtonText = () => {\n    if (isConnecting) {\n      return connected ? 'Disconnecting...' : 'Connecting...';\n    }\n    return connected ? 'Disconnect LinkedIn' : 'Connect LinkedIn';\n  };\n  const getButtonStyle = () => {\n    const baseStyle = {\n      color: 'white',\n      border: 'none',\n      padding: '10px 16px',\n      borderRadius: '6px',\n      cursor: isConnecting ? 'not-allowed' : 'pointer',\n      fontSize: '14px',\n      fontWeight: '500',\n      transition: 'all 0.2s ease',\n      opacity: isConnecting ? 0.7 : 1\n    };\n    if (connected) {\n      return {\n        ...baseStyle,\n        backgroundColor: '#dc3545',\n        '&:hover': {\n          backgroundColor: '#c82333'\n        }\n      };\n    } else {\n      return {\n        ...baseStyle,\n        backgroundColor: '#0077b5',\n        '&:hover': {\n          backgroundColor: '#005885'\n        }\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connected ? handleDisconnect : handleConnect,\n      disabled: isConnecting,\n      style: getButtonStyle(),\n      children: getButtonText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), getConnectionInfo(), connectionStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '8px',\n        padding: '8px',\n        borderRadius: '4px',\n        fontSize: '12px',\n        backgroundColor: connectionStatus.success ? '#d4edda' : '#f8d7da',\n        color: connectionStatus.success ? '#155724' : '#721c24',\n        border: `1px solid ${connectionStatus.success ? '#c3e6cb' : '#f5c6cb'}`\n      },\n      children: connectionStatus.success ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\u2705 Connected Successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 57\n        }, this), connectionStatus.message, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 41\n        }, this), connectionStatus.has_org_access && connectionStatus.organization_count > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Company Pages: \", connectionStatus.organization_count, \" detected\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\u274C Connection Failed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 51\n        }, this), connectionStatus.error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(LinkedInConnect, \"rzhSJsZz5X/uC3tiEPI8qfbt0dQ=\");\n_c = LinkedInConnect;\nexport default LinkedInConnect;\nvar _c;\n$RefreshReg$(_c, \"LinkedInConnect\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","LinkedInConnect","appUser","onConnected","connected","connectionDetails","_s","isConnecting","setIsConnecting","connectionStatus","setConnectionStatus","handleMessage","event","data","type","success","posting_method","organization_count","has_org_access","person_urn","org_urn","message","successMessage","alert","setTimeout","console","log","window","location","href","error","addEventListener","removeEventListener","handleConnect","clientId","redirectUri","encodeURIComponent","scope","state","url","popup","open","checkClosed","setInterval","closed","clearInterval","handleDisconnect","token","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","app_user","status","errorData","json","token_expired","removeItem","ok","getConnectionInfo","detail","all_org_urns","style","marginTop","fontSize","color","children","fileName","_jsxFileName","lineNumber","columnNumber","getButtonText","getButtonStyle","baseStyle","border","padding","borderRadius","cursor","fontWeight","transition","opacity","backgroundColor","className","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Vibek Rana/Pictures/frontend-main/src/components/LinkedInConnect.js"],"sourcesContent":["// src/components/LinkedInConnect.js\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst LinkedInConnect = ({ appUser, onConnected, connected, connectionDetails = null }) => {\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState(null);\r\n\r\n  // Listen for popup messages\r\n  useEffect(() => {\r\n    const handleMessage = (event) => {\r\n      if (event.data.type === 'linkedin_callback') {\r\n        setIsConnecting(false);\r\n        \r\n        if (event.data.success) {\r\n          const { \r\n            posting_method, \r\n            organization_count, \r\n            has_org_access, \r\n            person_urn, \r\n            org_urn, \r\n            message \r\n          } = event.data;\r\n          \r\n          // Set detailed connection status for UI feedback\r\n          setConnectionStatus({\r\n            success: true,\r\n            posting_method,\r\n            organization_count: organization_count || 0,\r\n            has_org_access: has_org_access || false,\r\n            person_urn,\r\n            org_urn,\r\n            message: message || 'Connected successfully'\r\n          });\r\n\r\n          // Show success message with organization details\r\n          let successMessage = `LinkedIn connected successfully!\\n`;\r\n          successMessage += `Posting Method: ${posting_method}\\n`;\r\n          \r\n          if (has_org_access && organization_count > 0) {\r\n            successMessage += `Organizations Found: ${organization_count}\\n`;\r\n            successMessage += `Company Pages Detected: ${organization_count > 0 ? 'Yes' : 'No'}`;\r\n          } else {\r\n            successMessage += `Will post to: Personal Profile\\n`;\r\n            successMessage += `Company Pages: None found or no access`;\r\n          }\r\n          \r\n          alert(successMessage);\r\n          onConnected(); // Refresh status\r\n          \r\n          // Redirect to content page after successful connection\r\n          setTimeout(() => {\r\n            console.log('Redirecting to content page...');\r\n            window.location.href = '/content';\r\n          }, 2000);\r\n          \r\n        } else {\r\n          setConnectionStatus({\r\n            success: false,\r\n            error: event.data.error\r\n          });\r\n          alert(`LinkedIn connection failed: ${event.data.error}`);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', handleMessage);\r\n    return () => window.removeEventListener('message', handleMessage);\r\n  }, [onConnected]);\r\n\r\n  const handleConnect = () => {\r\n    setIsConnecting(true);\r\n    setConnectionStatus(null);\r\n    \r\n    const clientId = '86geycovoa141y'; // Your LinkedIn Client ID\r\n    const redirectUri = encodeURIComponent('http://13.233.45.167:5000/social/linkedin/callback');\r\n    \r\n    // Use only authorized scopes from your LinkedIn app\r\n    const scope = encodeURIComponent('r_basicprofile w_member_social w_organization_social r_organization_social rw_organization_admin w_organization_social_feed r_member_profileAnalytics');\r\n    const state = encodeURIComponent(appUser);\r\n    \r\n    const url = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}&state=${state}&scope=${scope}`;\r\n    \r\n    // Open in popup window\r\n    const popup = window.open(url, 'linkedin-auth', 'width=600,height=700,scrollbars=yes,resizable=yes');\r\n    \r\n    // Check if popup was blocked\r\n    if (!popup) {\r\n      alert('Popup blocked. Please allow popups for this site and try again.');\r\n      setIsConnecting(false);\r\n      return;\r\n    }\r\n    \r\n    // Monitor popup\r\n    const checkClosed = setInterval(() => {\r\n      if (popup.closed) {\r\n        clearInterval(checkClosed);\r\n        setIsConnecting(false);\r\n        // Give some time for message to be processed\r\n        setTimeout(() => {\r\n          onConnected(); // Refresh status when popup closes\r\n        }, 1000);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const handleDisconnect = async () => {\r\n    try {\r\n      setIsConnecting(true);\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Please login again to disconnect LinkedIn.');\r\n        window.location.href = '/login';\r\n        return;\r\n      }\r\n\r\n      const response = await fetch('http://13.233.45.167:5000/social/linkedin/disconnect', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ app_user: appUser })\r\n      });\r\n      \r\n      if (response.status === 401) {\r\n        const errorData = await response.json();\r\n        if (errorData.token_expired) {\r\n          localStorage.removeItem('token');\r\n          alert('Your session has expired. Please login again.');\r\n          window.location.href = '/login';\r\n          return;\r\n        }\r\n      }\r\n      \r\n      if (response.ok) {\r\n        setConnectionStatus(null);\r\n        onConnected(); // Refresh status\r\n        alert('LinkedIn disconnected successfully!');\r\n      } else {\r\n        const error = await response.json();\r\n        alert(`Failed to disconnect: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error disconnecting LinkedIn:', error);\r\n      alert('Error disconnecting LinkedIn. Please try again.');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to get connection info display\r\n  const getConnectionInfo = () => {\r\n    if (!connected || !connectionDetails) return null;\r\n\r\n    const { detail } = connectionDetails;\r\n    if (!detail) return null;\r\n\r\n    const { posting_method, has_org_access, organization_count = 0, all_org_urns = [] } = detail;\r\n    \r\n    return (\r\n      <div style={{ marginTop: '8px', fontSize: '12px', color: '#666' }}>\r\n        <div><strong>Method:</strong> {posting_method || 'Personal Profile'}</div>\r\n        {has_org_access && organization_count > 0 && (\r\n          <>\r\n            <div><strong>Organizations:</strong> {organization_count}</div>\r\n            <div><strong>Company Access:</strong> Yes</div>\r\n          </>\r\n        )}\r\n        {(!has_org_access || organization_count === 0) && (\r\n          <div><strong>Company Access:</strong> Personal only</div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getButtonText = () => {\r\n    if (isConnecting) {\r\n      return connected ? 'Disconnecting...' : 'Connecting...';\r\n    }\r\n    return connected ? 'Disconnect LinkedIn' : 'Connect LinkedIn';\r\n  };\r\n\r\n  const getButtonStyle = () => {\r\n    const baseStyle = {\r\n      color: 'white',\r\n      border: 'none',\r\n      padding: '10px 16px',\r\n      borderRadius: '6px',\r\n      cursor: isConnecting ? 'not-allowed' : 'pointer',\r\n      fontSize: '14px',\r\n      fontWeight: '500',\r\n      transition: 'all 0.2s ease',\r\n      opacity: isConnecting ? 0.7 : 1\r\n    };\r\n\r\n    if (connected) {\r\n      return {\r\n        ...baseStyle,\r\n        backgroundColor: '#dc3545',\r\n        '&:hover': {\r\n          backgroundColor: '#c82333'\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        ...baseStyle,\r\n        backgroundColor: '#0077b5',\r\n        '&:hover': {\r\n          backgroundColor: '#005885'\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button \r\n        className=\"connect-button\" \r\n        onClick={connected ? handleDisconnect : handleConnect}\r\n        disabled={isConnecting}\r\n        style={getButtonStyle()}\r\n      >\r\n        {getButtonText()}\r\n      </button>\r\n      \r\n      {/* Connection Details */}\r\n      {getConnectionInfo()}\r\n      \r\n      {/* Connection Status Feedback */}\r\n      {connectionStatus && (\r\n        <div style={{ \r\n          marginTop: '8px', \r\n          padding: '8px', \r\n          borderRadius: '4px',\r\n          fontSize: '12px',\r\n          backgroundColor: connectionStatus.success ? '#d4edda' : '#f8d7da',\r\n          color: connectionStatus.success ? '#155724' : '#721c24',\r\n          border: `1px solid ${connectionStatus.success ? '#c3e6cb' : '#f5c6cb'}`\r\n        }}>\r\n          {connectionStatus.success ? (\r\n            <div>\r\n              <strong>✅ Connected Successfully!</strong><br/>\r\n              {connectionStatus.message}<br/>\r\n              {connectionStatus.has_org_access && connectionStatus.organization_count > 0 && (\r\n                <span>Company Pages: {connectionStatus.organization_count} detected</span>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <strong>❌ Connection Failed</strong><br/>\r\n              {connectionStatus.error}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LinkedInConnect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}