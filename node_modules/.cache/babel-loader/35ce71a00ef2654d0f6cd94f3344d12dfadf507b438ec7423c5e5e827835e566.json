{"ast":null,"code":"const fetchUserData = async () => {\n  try {\n    const response = await fetch(`http://13.233.45.167:5000/user/profile`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const userData = await response.json();\n      console.log('User data from API:', userData); // Debug log\n\n      setUser({\n        username: userData.username || username,\n        email: userData.email || 'user@example.com',\n        businessType: userData.business_type || 'Not specified',\n        // Changed from businessType\n        joinDate: userData.created_at // Changed from createdAt\n        ? new Date(userData.created_at * 1000).toLocaleDateString('en-US', {\n          month: 'long',\n          year: 'numeric'\n        }) : 'Recently',\n        postsCreated: userData.posts_created || 0,\n        // Changed from postsCreated\n        connectedAccounts: userData.connected_accounts || 0\n      });\n    } else {\n      setUser({\n        username: username || 'User',\n        email: 'user@example.com',\n        businessType: 'Not specified',\n        joinDate: 'Recently',\n        postsCreated: 0,\n        connectedAccounts: 0\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    setUser({\n      username: username || 'User',\n      email: 'user@example.com',\n      businessType: 'Not specified',\n      joinDate: 'Recently',\n      postsCreated: 0,\n      connectedAccounts: 0\n    });\n  }\n};","map":{"version":3,"names":["fetchUserData","response","fetch","headers","token","ok","userData","json","console","log","setUser","username","email","businessType","business_type","joinDate","created_at","Date","toLocaleDateString","month","year","postsCreated","posts_created","connectedAccounts","connected_accounts","error"],"sources":["C:/Users/Vibek Rana/Pictures/frontend-main/src/Connect.js"],"sourcesContent":["const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://13.233.45.167:5000/user/profile`,\r\n          {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          const userData = await response.json();\r\n          console.log('User data from API:', userData); // Debug log\r\n          \r\n          setUser({\r\n            username: userData.username || username,\r\n            email: userData.email || 'user@example.com',\r\n            businessType: userData.business_type || 'Not specified', // Changed from businessType\r\n            joinDate: userData.created_at // Changed from createdAt\r\n              ? new Date(userData.created_at * 1000).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })\r\n              : 'Recently',\r\n            postsCreated: userData.posts_created || 0, // Changed from postsCreated\r\n            connectedAccounts: userData.connected_accounts || 0\r\n          });\r\n        } else {\r\n          setUser({\r\n            username: username || 'User',\r\n            email: 'user@example.com',\r\n            businessType: 'Not specified',\r\n            joinDate: 'Recently',\r\n            postsCreated: 0,\r\n            connectedAccounts: 0\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n        setUser({\r\n          username: username || 'User',\r\n          email: 'user@example.com',\r\n          businessType: 'Not specified',\r\n          joinDate: 'Recently',\r\n          postsCreated: 0,\r\n          connectedAccounts: 0\r\n        });\r\n      }\r\n    };"],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC5B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,wCAAwC,EACxC;MACEC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUC,KAAK,EAAE;QAClC,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IAED,IAAIH,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACtCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,QAAQ,CAAC,CAAC,CAAC;;MAE9CI,OAAO,CAAC;QACNC,QAAQ,EAAEL,QAAQ,CAACK,QAAQ,IAAIA,QAAQ;QACvCC,KAAK,EAAEN,QAAQ,CAACM,KAAK,IAAI,kBAAkB;QAC3CC,YAAY,EAAEP,QAAQ,CAACQ,aAAa,IAAI,eAAe;QAAE;QACzDC,QAAQ,EAAET,QAAQ,CAACU,UAAU,CAAC;QAAA,EAC1B,IAAIC,IAAI,CAACX,QAAQ,CAACU,UAAU,GAAG,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC,GACpG,UAAU;QACdC,YAAY,EAAEf,QAAQ,CAACgB,aAAa,IAAI,CAAC;QAAE;QAC3CC,iBAAiB,EAAEjB,QAAQ,CAACkB,kBAAkB,IAAI;MACpD,CAAC,CAAC;IACJ,CAAC,MAAM;MACLd,OAAO,CAAC;QACNC,QAAQ,EAAEA,QAAQ,IAAI,MAAM;QAC5BC,KAAK,EAAE,kBAAkB;QACzBC,YAAY,EAAE,eAAe;QAC7BE,QAAQ,EAAE,UAAU;QACpBM,YAAY,EAAE,CAAC;QACfE,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDf,OAAO,CAAC;MACNC,QAAQ,EAAEA,QAAQ,IAAI,MAAM;MAC5BC,KAAK,EAAE,kBAAkB;MACzBC,YAAY,EAAE,eAAe;MAC7BE,QAAQ,EAAE,UAAU;MACpBM,YAAY,EAAE,CAAC;MACfE,iBAAiB,EAAE;IACrB,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}